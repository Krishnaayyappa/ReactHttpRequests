{"ast":null,"code":"var _jsxFileName = \"/Users/krishnanarina/Desktop/httprequestsproj/src/App.js\";\nimport React, { useState, useEffect, useCallback } from 'react';\nimport MoviesList from './components/MoviesList';\nimport AddMovie from './components/AddMovie';\nimport './App.css';\n\nfunction App() {\n  // const dummyMovies = [\n  //   {\n  //     id: 1,\n  //     title: 'Some Dummy Movie',\n  //     openingText: 'This is the opening text of the movie',\n  //     releaseDate: '2021-05-18',\n  //   },\n  //   {\n  //     id: 2,\n  //     title: 'Some Dummy Movie 2',\n  //     openingText: 'This is the second opening text of the movie',\n  //     releaseDate: '2021-05-19',\n  //   },\n  // ];\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null); // Syntax:1(using .then())\n  // function fetchMoviesHandler(){\n  //   fetch(\"https://swapi.dev/api/films/\").then(response => {\n  //     return response.json();\n  //   }).then (data => {\n  //     const transformedMovies = data.results.map(movie => {\n  //       return {id:movie.episode_id,\n  //         title:movie.title,\n  //         releaseDate:movie.release_date,\n  //         director:movie.director};\n  //     });\n  //     setMovies(transformedMovies);\n  //   })\n  // }\n  //syntax:2 (using async-await)\n\n  const fetchMoviesHandler = useCallback(async () => {\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      const response = await fetch(\"https://http-react-33a71-default-rtdb.firebaseio.com/movies.json\");\n\n      if (!response.ok) {\n        throw new Error(\"Somewthing went wrong!\");\n      }\n\n      const data = await response.json();\n      const transformedMovies = data.results.map(movie => {\n        return {\n          id: movie.episode_id,\n          title: movie.title,\n          releaseDate: movie.release_date,\n          director: movie.director\n        };\n      });\n      setMovies(transformedMovies);\n    } catch (error) {\n      setError(error.message);\n    }\n\n    setIsLoading(false);\n  }, []);\n  useEffect(() => {\n    fetchMoviesHandler();\n  }, []);\n\n  async function addMovieHandler(movie) {\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      const response = await fetch(\"https://http-react-33a71-default-rtdb.firebaseio.com\", {\n        method: \"POST\",\n        body: JSON.stringify(movie),\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      });\n\n      if (!response.ok) {\n        throw new Error(\"The data is  not pushed to the baackend\");\n      }\n    } catch (error) {\n      setError(error.message);\n    }\n\n    const data = await response.json();\n    console.log(data);\n  } // we can also write statements  and assign the element to be displayed in a variable \n  // based on the condition\n  // example\n\n\n  let content = /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 17\n    }\n  }, \"No movies were found\");\n\n  if (movies.length > 0) {\n    content = /*#__PURE__*/React.createElement(MoviesList, {\n      movies: movies,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 15\n      }\n    });\n  }\n\n  if (error) {\n    content = /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 15\n      }\n    }, error);\n  }\n\n  if (isLoading) {\n    content = /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 15\n      }\n    }, \"Loading...\");\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(AddMovie, {\n    onAddMovie: addMovieHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: fetchMoviesHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 9\n    }\n  }, \"Fetch Movies\")), /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }\n  },\n  /* {!isLoading && movies.length >0 && <MoviesList movies={movies} />}\n  {isLoading && <p>Loading...</p>}\n  {!isLoading && movies.length === 0 && !error && <p>No movies were found</p>}\n  {!isLoading && error && <p>{error}</p>} */\n  content));\n}\n\nexport default App;","map":{"version":3,"names":["React","useState","useEffect","useCallback","MoviesList","AddMovie","App","movies","setMovies","isLoading","setIsLoading","error","setError","fetchMoviesHandler","response","fetch","ok","Error","data","json","transformedMovies","results","map","movie","id","episode_id","title","releaseDate","release_date","director","message","addMovieHandler","method","body","JSON","stringify","headers","console","log","content","length"],"sources":["/Users/krishnanarina/Desktop/httprequestsproj/src/App.js"],"sourcesContent":["import React, {useState,useEffect,useCallback} from 'react';\n\nimport MoviesList from './components/MoviesList';\nimport AddMovie from './components/AddMovie';\nimport './App.css';\n\nfunction App() {\n  // const dummyMovies = [\n  //   {\n  //     id: 1,\n  //     title: 'Some Dummy Movie',\n  //     openingText: 'This is the opening text of the movie',\n  //     releaseDate: '2021-05-18',\n  //   },\n  //   {\n  //     id: 2,\n  //     title: 'Some Dummy Movie 2',\n  //     openingText: 'This is the second opening text of the movie',\n  //     releaseDate: '2021-05-19',\n  //   },\n  // ];\n\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false)\n  const [error, setError] = useState(null);\n\n  // Syntax:1(using .then())\n\n  // function fetchMoviesHandler(){\n  //   fetch(\"https://swapi.dev/api/films/\").then(response => {\n  //     return response.json();\n  //   }).then (data => {\n  //     const transformedMovies = data.results.map(movie => {\n  //       return {id:movie.episode_id,\n  //         title:movie.title,\n  //         releaseDate:movie.release_date,\n  //         director:movie.director};\n  //     });\n  //     setMovies(transformedMovies);\n  //   })\n  // }\n\n  //syntax:2 (using async-await)\n  const fetchMoviesHandler = useCallback(async () => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      const response = await fetch(\"https://http-react-33a71-default-rtdb.firebaseio.com/movies.json\");\n      if (!response.ok){\n        throw new Error(\"Somewthing went wrong!\");\n      }\n      const data = await response.json();\n      const transformedMovies = data.results.map(movie => {\n      return {id:movie.episode_id,\n        title:movie.title,\n        releaseDate:movie.release_date, \n        director:movie.director};\n      });\n      setMovies(transformedMovies);\n    } catch (error){\n      setError(error.message);\n    }\n    setIsLoading(false);\n  }, []);\n\n  useEffect(() => {\n    fetchMoviesHandler();\n  }, []);\n\n  async function addMovieHandler(movie){\n    setIsLoading(true);\n    setError(null);\n    try{\n      const response = await fetch(\"https://http-react-33a71-default-rtdb.firebaseio.com\", {\n        method: \"POST\",\n        body: JSON.stringify(movie),\n        headers: {\n        \"Content-Type\": \"application/json\"\n        }\n      });\n      if (!response.ok){\n        throw new Error(\"The data is  not pushed to the baackend\")\n      }\n    } catch(error){\n      setError(error.message);\n    }\n    \n\n    const data = await response.json();\n    console.log(data);\n  }\n\n\n\n  // we can also write statements  and assign the element to be displayed in a variable \n  // based on the condition\n  // example\n\n  let content = <p>No movies were found</p>;\n\n  if (movies.length > 0 ){\n    content = <MoviesList movies={movies} />;\n  }\n\n  if (error){\n    content = <p>{error}</p>\n  }\n\n  if (isLoading){\n    content = <p>Loading...</p>\n  }\n\n\n  return (\n    <React.Fragment>\n      <section>\n        <AddMovie onAddMovie = {addMovieHandler}/>\n      </section>\n      <section>\n        <button onClick = {fetchMoviesHandler}>Fetch Movies</button>\n      </section>\n      <section>\n        {/* {!isLoading && movies.length >0 && <MoviesList movies={movies} />}\n        {isLoading && <p>Loading...</p>}\n        {!isLoading && movies.length === 0 && !error && <p>No movies were found</p>}\n        {!isLoading && error && <p>{error}</p>} */ content}\n      </section>\n    </React.Fragment>\n  );\n}\n\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}